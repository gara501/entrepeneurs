{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","businessData","cityFilters","typeFilters","isChecked","classificationFilters","category","handleChecked","bind","assertThisInitialized","setState","Data","e","persist","newData","target","dataset","type","map","item","city","value","console","log","push","filter","classification","length","preventDefault","document","querySelector","classList","add","cities","key","toConsumableArray","Set","types","_this2","react_default","a","createElement","className","id","onClick","moveIntro","data-type","onChange","htmlFor","business","citycode","name","description","href","twitter","web","facebook","username","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a14de0e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Data from './data/people.json'\nimport './App.css';\nimport './styles.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businessData: [],\n      cityFilters: [],\n      typeFilters: [],\n      isChecked: true,\n      classificationFilters: [],\n      category: 'All'\n    };\n    this.handleChecked = this.handleChecked.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({businessData: Data});\n    this.setState({cityFilters: this.cityFilters()});\n    this.setState({typeFilters: this.typeFilters()});\n    this.setState({classificationFilters: this.classificationFilters()});\n  }\n\n  handleChecked (e) {\n    e.persist()\n    let newData = [];\n    this.setState({isChecked: !this.state.isChecked});\n    \n    switch (e.target.dataset.type) {\n      case \"city\":\n        this.state.businessData.map(item => {\n          if (item.city === e.target.value) {\n            console.log('CITY', item)\n            newData.push(item);\n          }\n          return item;\n        });\n        break;\n      case \"type\":\n        this.state.businessData.filter(item => {\n          if (item.type === e.target.value) {\n            newData.push(item);\n          }\n          return item;\n        });\n        break;\n      case \"classification\":\n        this.state.businessData.filter(item => {\n          if (item.classification === e.target.value) {\n            newData.push(item);\n          }\n          return item;\n        });\n        break;    \n      default:\n        break;\n    }\n    console.log(newData);\n    if (newData.length <= 0) {\n      newData = Data;\n    }\n    this.setState({businessData: newData});\n  }\n\n  moveIntro(e) {\n    e.preventDefault();\n    let introDiv = document.querySelector('.full-side');\n    introDiv.classList.add('out');\n    console.log('The link was clicked.');\n  }\n\n  cityFilters() {\n    let cities = [];\n    Data.map((item, key) => \n      cities.push(item.city)\n    );\n    var cleanCities = [ ...new Set(cities) ];\n    return cleanCities;\n  }\n\n  typeFilters() {\n    let types = [];\n    Data.map((item, key) => \n      types.push(item.type)\n    );\n    var cleanTypes = [ ...new Set(types) ];\n    return cleanTypes;\n  }\n\n  classificationFilters() {\n    let classification = [];\n    Data.map((item, key) => \n      classification.push(item.classification)\n    );\n    var cleanClass = [ ...new Set(classification) ];\n    return cleanClass;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"full-side\">\n            <div className=\"intro\">\n              <h1 className=\"intro-title\">Emprendedores Colombianos, busca lo que necesites, en la ciudad que necesites!</h1>\n              <button id=\"introButton\" className=\"button button-inverse\" onClick={this.moveIntro}>Ver Emprendimientos</button>\n            </div>\n          </div>\n          <div className=\"left-side\">\n            <h2>Filtra tu busqueda:</h2>\n            <div className=\"form-block\">\n              <h4 className=\"title\">Ciudad</h4>\n              {this.state.cityFilters.map((item, key) => \n                <div className=\"filters filters-city\" key={key}>\n                  <input type=\"checkbox\" id={\"city_\"+key} data-type=\"city\" value={item} onChange={ this.handleChecked } /> <label htmlFor={\"city_\"+key}>{item}</label>\n                </div>\n              )}\n            </div>\n            <div className=\"form-block\">              \n              <h4 className=\"title\">Tipo</h4>\n              {this.state.typeFilters.map((item, key) => \n                <div className=\"filters filters-type\" key={key}>\n                  <input type=\"checkbox\" id={\"type_\"+key} data-type=\"type\" value={item} onChange={ this.handleChecked } /> <label htmlFor={\"type_\"+key}>{item}</label>\n                </div>\n              )}\n            </div>\n            <div className=\"form-block\">              \n              <h4 className=\"title\">Categor√≠a</h4>\n              {this.state.classificationFilters.map((item, key) => \n                <div className=\"filters filters-type\" key={key}>\n                  <input type=\"checkbox\" id={\"classif_\"+key} data-type=\"classification\" value={item} onChange={ this.handleChecked } /> <label htmlFor={\"classif_\"+key}>{item}</label>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"right-side\">\n            <h4 className=\"title\">Category: {this.state.category}</h4>\n            <div className=\"products\"> \n              {this.state.businessData.map((business, key) => \n                <div className=\"product-item\" key={key}>\n                  <div className= {\"product-city product-city-\" + business.citycode}>\n                    {business.city}\n                  </div>\n                  <h5 className=\"title-item\">{business.business.name}</h5>\n                  <p className=\"description\">{business.business.description}</p>\n                  <ul className=\"info\">\n                    <li><a href={\"https://www.twitter.com/\"+business.business.twitter}><span className=\"socicon socicon-twitter\"></span></a></li>\n                    <li><a href={business.business.web}><span className=\"socicon socicon-internet\"></span></a></li>\n                    <li><a href={\"https://www.facebook.com/\"+business.business.facebook}><span className=\"socicon socicon-facebook\"></span></a></li>\n                  </ul>\n                  <p className=\"small\">\n                    Contacto: <a href={\"https://www.twitter.com/\"+business.twitter}>{business.username}</a>\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}